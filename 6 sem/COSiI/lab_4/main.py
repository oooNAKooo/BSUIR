import numpy as np  # Импорт библиотеки numpy для работы с массивами и математическими операциями
import pywt  # Импорт библиотеки PyWavelets для работы с вейвлет-преобразованиями
import matplotlib.pyplot as plt  # Импорт библиотеки matplotlib для построения графиков

# Функция, которую мы хотим преобразовать
def signal_function(x):
    # Определение функции, которая возвращает комбинацию косинуса и синуса
    return np.cos(3 * x) + np.sin(2 * x)

# Создаем массив x, представляющий значения, по которым будем строить графики
x = np.linspace(0, 2 * np.pi, 1024)  # 1024 точки от 0 до 2*pi (не включая)
y = signal_function(x)  # Применяем функцию к массиву x, чтобы получить значения y

# Преобразование Хаара с использованием лифтинговой схемы
def haara_wavelet_transform(signal):
    # Выполняем вейвлет-преобразование Хаара с одним уровнем разложения
    # 'haar' указывает тип вейвлета, 'level=1' - уровень разложения
    coeffs = pywt.wavedec(signal, 'haar', level=1)
    return coeffs  # Возвращаем список коэффициентов (аппроксимация и детали)

# Обратное преобразование Хаара для восстановления сигнала
def inverse_haara_wavelet_transform(coeffs):
    # Восстанавливаем сигнал из коэффициентов вейвлета
    signal = pywt.waverec(coeffs, 'haar')  # 'haar' - тип вейвлета
    return signal  # Возвращаем восстановленный сигнал

# Выполняем вейвлет-преобразование Хаара на сигнале y
coefficients = haara_wavelet_transform(y)

# Выполняем обратное вейвлет-преобразование, чтобы восстановить сигнал из коэффициентов
reconstructed_signal = inverse_haara_wavelet_transform(coefficients)

# Печать результатов в консоль
print("Оригинальный сигнал:")
print(y)  # Выводим значения исходного сигнала
print("\nКоэффициенты вейвлет-преобразования Хаара:")
print(coefficients)  # Выводим список коэффициентов (аппроксимация и детали)
print("\nВосстановленный сигнал:")
print(reconstructed_signal)  # Выводим восстановленный сигнал

# Визуализация с помощью графиков
plt.figure(figsize=(12, 6))  # Создаем фигуру для графиков с заданным размером (12x6)

# График исходного сигнала
plt.subplot(3, 1, 1)  # Первый из трех графиков (вертикально расположены)
plt.plot(x, y)  # Строим график исходного сигнала
plt.title('Оригинальный сигнал')  # Заголовок графика
plt.xlabel('x')  # Подпись оси x
plt.ylabel('y')  # Подпись оси y

# График коэффициентов вейвлет-преобразования
plt.subplot(3, 1, 2)  # Второй график из трех
plt.stem(coefficients[0], basefmt='b-')  # Построение стержневого графика
plt.title('Коэффициенты вейвлет-преобразования Хаара')  # Заголовок графика
plt.xlabel('Коэффициенты')  # Подпись оси x
plt.ylabel('Значение')  # Подпись оси y

# График восстановленного сигнала
plt.subplot(3, 1, 3)  # Третий график
plt.plot(x, reconstructed_signal)  # Строим график восстановленного сигнала
plt.title('Восстановленный сигнал')  # Заголовок графика
plt.xlabel('x')  # Подпись оси x
plt.ylabel('y')  # Подпись оси y

plt.tight_layout()  # Улучшает автоматическое размещение графиков
plt.show()  # Отображаем все графики на экране


# библиотечная проверка метода хаара
