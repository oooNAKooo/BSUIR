Важные отличия между потоками и процессами сводятся к следующим моментам:
•  Потоки являются более легковесными и быстрее создаются и уничтожаются, поскольку они используют общие ресурсы процесса и не требуют полного создания нового адресного пространства.
•  Потоки внутри одного процесса могут легко обмениваться данными без необходимости использования механизмов межпроцессного взаимодействия.
•  Потоки могут быть более эффективными в использовании ресурсов процессора и памяти, так как они могут выполняться параллельно на разных ядрах процессора.
•  Процессы обеспечивают более высокую изоляцию данных и защиту, так как каждый процесс имеет свои собственные ресурсы и адресное пространство.

Семафор – примитив синхронизации, позволяет контролировать доступ к ограниченным ресурсам или определенной операции, регулируя кол-во потоков, которым разрешено одновременно выполнять задачу

Мьютекс – примитив синхронизации, обеспечивает взаимное исключение и защиту общих ресурсов от одновременного доступа нескольких потоков. Гарантирует, что только один поток может выполнить секцию кода

Мюьтекс используется для защиты общих ресурсов от одновременного доступа, семафор – управление доступом к ресурсам/ограничение количество потоков

Увеличение размера очереди:
Если значение переменной "key" равно '+', то выполняется следующий блок кода:

  Выводится текущий размер очереди на экран.
  Создается объект "unique_lock<mutex>" с именем "locker" для мьютекса "queueMutex". Мьютекс используется для обеспечения      синхронизации доступа к разделяемому ресурсу (в данном случае переменной "queueSize").
  Захватывается мьютекс "queueMutex" с помощью метода "lock()" объекта "locker".
  Размер очереди увеличивается на 1 путем инкрементации переменной "queueSize".
  Выводится сообщение о увеличении размера очереди на экран.
  Разблокируется мьютекс "queueMutex" с помощью метода "unlock()" объекта "locker".
  Вызывается метод "notify_all()" объекта "queueNotFull", который уведомляет все потоки, ожидающие на этом условном переменном "queueNotFull", о возможности продолжения выполнения.
  
Уменьшение размера очереди:
Если значение переменной "key" равно '-', то выполняется следующий блок кода:

  Выводится текущий размер очереди на экран.
  Создается объект "unique_lock<mutex>" с именем "locker" для мьютекса "queueMutex".
  Захватывается мьютекс "queueMutex" с помощью метода "lock()" объекта "locker".
  Проверяется, что размер очереди больше 0.
  Если условие выполняется, то размер очереди уменьшается на 1 путем декрементации переменной "queueSize".
  Выводится сообщение о уменьшении размера очереди на экран.
  Разблокируется мьютекс "queueMutex" с помощью метода "unlock()" объекта "locker".
  Вызывается метод "notify_all()" объекта "queueNotFull", который уведомляет все потоки, ожидающие на этом условном переменном "queueNotFull", о возможности продолжения выполнения.
